sections:
  - tag: select
    name: Selecting data
    description: These commands allow searching for data in the database.
    order: 4

commands:
  - tag: db
    section: select
    description: Reference a database.

    body:
      js: "$PARENT.db(dbName)"
      py: "$PARENT.db(db_name)"
      rb: "$PARENT.db(db_name)"

    io:
      - - r
        - db 

    examples:
      - description: Before we can query a table we have to select the correct database.
        code:
          py: r.db('heroes').table('marvel').run(conn)
          rb: r.db('heroes').table('marvel').run(conn)
          js: r.db('heroes').table('marvel').run(conn, callback)

  - tag: table
    section: select
    description: |
      Select all documents in a table. This command can be chained with
      other commands to do further processing on the data.

    body:
      js: "$PARENT.table(name[, {useOutdated: false}])"
      py: "$PARENT.table(name[, use_outdated=False])"
      rb: "$PARENT.table(name[, opts])"

    io:
      - - db
        - table 

    examples:
      - description: Return all documents in the table 'marvel' of the default database.
        code:
          py: r.table('marvel').run(conn)
          rb: r.table('marvel').run(conn)
          js: r.table('marvel').run(conn, callback)
      - description: Return all documents in the table 'marvel' of the database 'heroes'.
        code:
          py: r.db('heroes').table('marvel').run(conn)
          rb: r.db('heroes').table('marvel').run(conn)
          js: r.db('heroes').table('marvel').run(conn, callback)
      - description: |
          If you are OK with potentially out of date data
          from this table and want potentially faster reads, pass
          a flag allowing out of date data.
        code:
          js: "r.db('heroes').table('marvel', {useOutdated: true}).run(conn, callback)"
          py: r.db('heroes').table('marvel', True).run(conn)
          rb: r.db('heroes').table('marvel', {:use_outdated => true}).run(conn)

  - tag: get
    section: select
    description: Get a document by primary key.

    body: "$PARENT.get(key)"

    io:
      - - table
        - singleRowSelection

    examples:
      - description: Find a document with the primary key 'superman'.
        code:
          py: r.table('marvel').get('superman').run(conn)
          rb: r.table('marvel').get('superman').run(conn)
          js: r.table('marvel').get('superman').run(conn, callback)

  - tag: get_all
    section: select
    description: Get all documents where the given value matches the value of the requested index.

    name:
      js: getAll
      py: get_all
      rb: get_all

    body:
      py: "$PARENT.get_all(key1[, key2...], [, index='id'])"
      rb: "$PARENT.get_all(key[, key2...], [, :index => 'id'])"
      js: "$PARENT.getAll(key[, key2...], [, {index:'id'}])"

    io:
      - - table
        - selection

    examples:
        - description: |
            Secondary index keys are not guaranteed to be unique so we cannot
            query via "get" when using a secondary index.
          code:
            py: r.table('marvel').get_all('man_of_steel', index='code_name').run(conn)
            js: r.table('marvel').getAll('man_of_steel', {index:'code_name'}).run(conn, callback)
            rb: r.table('marvel').get_all('man_of_steel', :index => 'code_name').run(conn)
        - description: |
            Without an index argument, we default to the primary index. While
            `get` will either return the document or `null` when no document
            with such a primary key value exists, this will return either a one
            or zero length stream.
          code:
            py: r.table('dc').get_all('superman').run(conn)
            js: r.table('dc').getAll('superman').run(conn, callback)
            rb: r.table('dc').get_all('superman').run(conn)
        - description: |
            You can get multiple documents in a single call to `get_all`.
          code:
            py: r.table('dc').get_all('superman', 'ant man').run(conn)
            js: r.table('dc').getAll('superman', 'ant man').run(conn, callback)
            rb: r.table('dc').get_all('superman', 'ant man').run(conn)

  - tag: between
    section: select
    description: |
      Get all documents between two keys.  Accepts three optional arguments: `index`, `left_bound`, and `right_bound`.  If `index` is set to the name of a secondary index, `between` will return all documents where that index's value is in the specified range (it uses the primary key by default).  `left_bound` or `right_bound` may be set to `open` or `closed` to indicate whether or not to include that endpoint of the range (by default, `left_bound` is closed and `right_bound` is open).

    body:
      py: "$PARENT.between(lower_key, upper_key[, index='id', left_bound='closed', right_bound='open'])"
      rb: "$PARENT.between(lower_key, upper_key[, :index => 'id', :left_bound => 'closed', :right_bound => 'open'])"
      js: "$PARENT.between(lowerKey, upperKey[, {index:'id', left_bound:'closed', right_bound:'open'}])"

    io:
      - - table
        - selection

    examples:
        - description: Find all users with primary key >= 10 and < 20 (a normal half-open interval).
          code:
            py: r.table('marvel').between(10, 20).run(conn)
            rb: r.table('marvel').between(10, 20).run(conn)
            js: r.table('marvel').between(10, 20).run(conn, callback)
        - description: Find all users with primary key >= 10 and <= 20 (an interval closed on both sides).
          code:
            py: r.table('marvel').between(10, 20, right_bound='closed').run(conn)
            rb: r.table('marvel').between(10, 20, :right_bound => 'closed').run(conn)
            js: r.table('marvel').between(10, 20, {'right_bound':'closed'}).run(conn, callback)
        - description: Find all users with primary key < 20.  (You can use `NULL` to mean "unbounded" for either endpoint.)
          code:
            py: r.table('marvel').between(None, 20, right_bound='closed').run(conn)
            rb: r.table('marvel').between(nil, 20, :right_bound => 'closed').run(conn)
            js: r.table('marvel').between(null, 20, {'right_bound':'closed'}).run(conn, callback)
        - description: |
            Between can be used on secondary indexes too. Just pass an optional index
            argument giving the secondary index to query.
          code:
            py: r.table('dc').between('dark_knight', 'man_of_steel', index='code_name').run(conn)
            js: r.table('dc').between('dark_knight', 'man_of_steel', {index:'code_name'}).run(conn, callback)
            rb: r.table('dc').between('dark_knight', 'man_of_steel', :index => 'code_name').run(conn)

  - tag: filter
    section: select
    description: |
      Get all the documents for which the given predicate is true.<br
      /><br /> <code>filter</code> can be called on a sequence,
      selection, or a field containing an array of elements. The
      return type is the same as the type on which the function was
      called on.  The body of every filter is wrapped in an implicit
      `.default(false)`, and the default value can be changed by
      passing the optional argument `default`.  Setting this optional
      argument to `r.error()` will cause any non-existence errors to
      abort the filter.

    body: "$PARENT.filter(predicate)"

    io:
      - - sequence
        - selection 
      - - stream
        - stream
      - - array
        - array 

    examples:
      - description: Get all active users aged 30.
        code:
          js: "r.table('users').filter({active: true, profile: {age: 30}}).run(conn, callback)"
          py: "r.table('users').filter({'active': True, 'profile': {'age': 30}}).run(conn)"
          rb: r.table('users').filter('active' => true, 'profile' => {'age' => 30}).run(conn)
      - description: Filter supports the <code>r.literal</code> syntax if you want to get an exact match.
        code:
          js: "r.table('users').filter({active: true, profile: r.literal({age: 30})}).run(conn, callback)"
          py: "r.table('users').filter({'active': True, 'profile': r.literal({'age': 30})}).run(conn)"
          rb: r.table('users').filter('active' => true, 'profile' => r.literal({'age' => 30})).run(conn)
      - description: Select all documents where the 'magazines' field is greater than 5.
        code:
          js: r.table('marvel').filter(r.row('magazines').gt(5)).run(conn, callback)
          py: r.table('users').filter(r.row['magazines'] > 5).run(conn)
          rb: r.table('users').filter{|user| user[:magazines] > 5}.run(conn)
      - description: Select all documents where the 'abilities' embedded document has an attribute called 'super-strength'.
        code:
          js: |
            r.table('marvel').filter(function(hero) {
              return hero('abilities').hasFields('super-strength')
            }).run(conn, callback)
          py: |
            r.table('marvel').filter(
                lambda hero: hero['abilities'].has_fields('super-strength')).run(conn)
          rb: |
            r.table('marvel').filter {|hero|
              hero[:abilities].has_fields('super-strength')
            }.run(conn)
      - description: Select all documents where the field 'powers' containing an array has an element equal to 10.
        code:
          js: |
            r.table('marvel').filter(
              r.row('poweres').filter(
                function(powers_el) { return powers_el.eq(10) }
              ).count().gt(0)
            ).run(conn, callback)
          py: |
            r.table('marvel').filter(
              r.row['powers'].filter(lambda el: el == 10).count() > 0
            ).run(conn)
          rb: |
            r.table('marvel').filter { |hero|
              hero[:powers].filter { |power_rank| power_rank.eq(10) }.count() > 0
            }.run(conn)

